# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/node:10.16.0

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    working_directory: ~/repo

    steps:
      - checkout

      - run: # test what branch we're on.
          name: "What branch am I on?"
          command: |
            echo ${CIRCLE_BRANCH}

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: yarn install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      # run tests!
      # - run: yarn test

      # run deploy!
      - add_ssh_keys

      - deploy:
          name: Deploy Over SSH
          command: |
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${REMOTE_SERVER} -l root \
              'sudo mkdir -p ~/_daniel/docker-data/a-nginx-data/www/sw.dlei.ca'
            scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              -r ./dist/a-starwars-app/* root@${REMOTE_SERVER}:~/_daniel/docker-data/a-nginx-data/www/sw.dlei.ca
      - run:
          name: Restart nginx
          command: |
            # copy nginx conf to prod server
            # scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            #   -r ./.circleci/nginx.conf root@${REMOTE_SERVER}:/etc/nginx/sites-available/sw.dlei.ca
            # prepare nginx conf on prod server
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${REMOTE_SERVER} -l root \
              "echo 'server {
                # generated from source by cicd

                listen 80;
                listen [::]:80;

                server_name starwars.dlei.ca sw.dlei.ca ${REMOTE_SERVER};

                root /usr/share/nginx/html/sw.dlei.ca; # => .../a-nginx-data/www/sw.dlei.ca

                index index.html;

                location / {
                  # try_files \$uri \$uri/ =404;
                  try_files \$uri \$uri/ /index.html;
                }
            }' > ~/_daniel/docker-data/a-nginx-conf/sw.dlei.ca.conf"
            # update and restart nginx on prod server
            # ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${REMOTE_SERVER} -l root \
            #   'sudo rm /etc/nginx/sites-enabled/sw.dlei.ca; \
            #   sudo ln -s /etc/nginx/sites-available/sw.dlei.ca /etc/nginx/sites-enabled/; \
            #   sudo service nginx restart'
            # ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${REMOTE_SERVER} -l root \
            #   'sudo service nginx restart' // got error???
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${REMOTE_SERVER} -l root \
              '/snap/bin/docker restart a-cicd-nginx-c'
  test:
    docker:
      - image: circleci/node:latest
    steps:
      # - checkout
      - run:
          name: "TODO test job"
          command: |
            echo ${CIRCLE_BRANCH}

  heroku:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - checkout
      - run:
          name: Deploy Master to Heroku
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master

workflows:
  version: 2
  build-deploy:
    jobs:
      - build

  deploy-heroku:
    jobs:
      - test
      - heroku:
          requires:
            - test
          filters:
            branches:
              only: master
